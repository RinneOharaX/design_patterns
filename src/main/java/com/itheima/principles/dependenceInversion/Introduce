依赖倒转原则：高层模块不应该依赖于底层模块，两者都应该依赖其抽象，细节应该依赖抽象。
通俗的说就是要通过抽象编程，而不是对着实现编程，这样的原则能够有效降低客户与实现模块之间的耦合程度。
假设A类里面调用了B类的成员变量或者方法，那么就称A为高层模块，B为底层模块。但其实这种直接对实现类的调用不符合原则。
建议抽取B的抽象方法或者接口，然后让A去调动B的抽象方法或者接口的方式去调用B，即对抽象进行编程，这样能显著降低耦合度，也就是依赖倒转。
通过代码改善前后能显著感觉到依赖倒转的便利性
